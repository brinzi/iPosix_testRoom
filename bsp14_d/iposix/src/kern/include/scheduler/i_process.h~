#ifndef _KERN_INCLUDE_SCHEDULER_I_PROCESS_H_
#define _KERN_INCLUDE_SCHEDULER_I_PROCESS_H_

#include "config/process.h"
#include "fs/filehandle_holder.hpp"

#include <stdint.h>
#include "utils/noncopyable.h"

namespace iposix {
namespace scheduler {

/**
 * Hardware independent part of a process
 *
 * @param Process hardware dependent part of a process
 */
template< typename Process >
struct i_process
	: virtual public ::iposix::utils::Noncopyable,
	  public ::iposix::fs::filehandle_holder,
	  public Process
{
	typedef Process hw_type;	/**< represents the hardware dependent type for external use */

	uint32_t pid;			/**< process identification */
	bool kernel;			/**< kernel process? */
	uint8_t state;	
	void * heap_top;		/**< current end of the heap */
	void * heap_max;		/**< heap_top can't exceed heap_max */

	/**
	 * Constructor.
	 *
	 * @param[in] kernel is the process a kernel process?
	 */
	i_process( bool kernel = false );
};

template class i_process< PROCESS >;

typedef i_process< PROCESS > process_type;	/**< process type for external use, i_process should never be used directly */

/**
 * Get the current process.
 *
 * @return current process
 */
process_type* current_process();

}} // iposix::scheduler

#endif /* !_KERN_INCLUDE_SCHEDULER_I_PROCESS_H_ */
